//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Z_Beehaku/Assets/GameFolder/01_Scripts/b_PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @B_PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @B_PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""b_PlayerController"",
    ""maps"": [
        {
            ""name"": ""PlayerBaseController"",
            ""id"": ""333acde8-ca9e-46a6-925d-b32e65099349"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bcf9595d-125b-4c8b-982e-3f83a64a72e4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""06b45bd8-cfe7-4a83-919f-293c7806dc26"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""3f5af270-1609-4c56-a65e-e6a3dffae0f1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3f232a4f-21e1-4ade-9c7a-630118e36ed0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e455a704-49ba-4ce2-9d7b-b6f3d5e974f8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""693c6e80-de32-4add-a623-e459a295ff46"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8bd9c1d5-c8ce-4f93-b20e-8da74601c858"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""34c9f395-af33-4ede-b9e8-f4f58376fc15"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b87fcb55-d510-482d-b5ba-7047e131807e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerBaseController
        m_PlayerBaseController = asset.FindActionMap("PlayerBaseController", throwIfNotFound: true);
        m_PlayerBaseController_Move = m_PlayerBaseController.FindAction("Move", throwIfNotFound: true);
        m_PlayerBaseController_Pause = m_PlayerBaseController.FindAction("Pause", throwIfNotFound: true);
    }

    ~@B_PlayerController()
    {
        UnityEngine.Debug.Assert(!m_PlayerBaseController.enabled, "This will cause a leak and performance issues, B_PlayerController.PlayerBaseController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerBaseController
    private readonly InputActionMap m_PlayerBaseController;
    private List<IPlayerBaseControllerActions> m_PlayerBaseControllerActionsCallbackInterfaces = new List<IPlayerBaseControllerActions>();
    private readonly InputAction m_PlayerBaseController_Move;
    private readonly InputAction m_PlayerBaseController_Pause;
    public struct PlayerBaseControllerActions
    {
        private @B_PlayerController m_Wrapper;
        public PlayerBaseControllerActions(@B_PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerBaseController_Move;
        public InputAction @Pause => m_Wrapper.m_PlayerBaseController_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBaseController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBaseControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerBaseControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerBaseControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerBaseControllerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerBaseControllerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerBaseControllerActions instance)
        {
            if (m_Wrapper.m_PlayerBaseControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerBaseControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerBaseControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerBaseControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerBaseControllerActions @PlayerBaseController => new PlayerBaseControllerActions(this);
    public interface IPlayerBaseControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
